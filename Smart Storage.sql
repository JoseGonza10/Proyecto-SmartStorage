
CREATE TABLE PROVEEDORES(
NOMBRE_PROVEEDOR VARCHAR2(25),
FECHA_CONTRATO VARCHAR(15),
CORREO_PROVEEDOR VARCHAR2(25),
TELEFONO_PROVEEDOR VARCHAR2(15),
ID_PROVEEDOR VARCHAR2(10),
PRIMARY KEY (ID_PROVEEDOR)
);

INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('INTERFRUT','05/03/2013', 'INTERFRUT@GMAIL.COM', '7777-7777', '21');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('FRUVER','09/10/2016', 'FRUVER@HOTMAIL.COM', '4444-4444', '22');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('JACKS','25/12/2020', 'JACKS@HOTMAIL.COM', '5555-5555', '23');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('DON FERNANDO','14/02/2023', 'DONFERNANDO@YAHOO.COM', '6666-6666', '24');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('SULI','10/01/2023', 'SULI@GMAIL.COM', '1111-1111','25');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('COCA COLA','12/04/2020', 'COCACOLA@GMAIL.COM', '2222-2222', '26');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('IMPERIAL','19/08/1998', 'IMPERIAL@GMAIL.COM', '8888-8888', '27');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('EL ARREO','23/03/2021', 'ELARREO@GMAIL.COM', '9999-9999', '28');
INSERT INTO PROVEEDORES (NOMBRE_PROVEEDOR,FECHA_CONTRATO,CORREO_PROVEEDOR,TELEFONO_PROVEEDOR,ID_PROVEEDOR)
VALUES ('SARDIMAR','30/07/2022', 'SARDIMAR@GMAIL.COM', '3333-3333', '29');


CREATE TABLE CLIENTES (
NOMBRE_CLIENTE VARCHAR2 (50),
PRIMER_APELLIDO_CLIENTE VARCHAR2(15),
SEGUNDO_APELLIDO_CLIENTE VARCHAR2(15),
CORREO_CLIENTE VARCHAR2(40),
TELEFONO_CLIENTE VARCHAR2(10),
CEDULA_CLIENTE VARCHAR (15),
PRIMARY KEY(CEDULA_CLIENTE));


INSERT INTO CLIENTES(NOMBRE_CLIENTE,PRIMER_APELLIDO_CLIENTE,SEGUNDO_APELLIDO_CLIENTE,CORREO_CLIENTE,TELEFONO_CLIENTE,CEDULA_CLIENTE)
VALUES ('ROBERTO','ALFARO','JIMENEZ','ROBERTOALFA@GMAIL.COM','8990-1231','2-4213-8749');
INSERT INTO CLIENTES(NOMBRE_CLIENTE,PRIMER_APELLIDO_CLIENTE,SEGUNDO_APELLIDO_CLIENTE,CORREO_CLIENTE,TELEFONO_CLIENTE,CEDULA_CLIENTE)
VALUES ('MARCO','ARIAS','HERNANDEZ','MARCOARIAS@GMAIL.COM','8241-1174','5-1253-3641');
INSERT INTO CLIENTES(NOMBRE_CLIENTE,PRIMER_APELLIDO_CLIENTE,SEGUNDO_APELLIDO_CLIENTE,CORREO_CLIENTE,TELEFONO_CLIENTE,CEDULA_CLIENTE)
VALUES ('MARIA','SOTO','VARGAS','MARIASOTO@HOTMAIL.COM','6289-9856','6-6527-1900');
INSERT INTO CLIENTES(NOMBRE_CLIENTE,PRIMER_APELLIDO_CLIENTE,SEGUNDO_APELLIDO_CLIENTE,CORREO_CLIENTE,TELEFONO_CLIENTE,CEDULA_CLIENTE)
VALUES ('JIMENA','PEREZ','GONZALEZ','JIMENAPEREZ@YAHOO.COM','7920-4293','3-2293-6159');
INSERT INTO CLIENTES(NOMBRE_CLIENTE,PRIMER_APELLIDO_CLIENTE,SEGUNDO_APELLIDO_CLIENTE,CORREO_CLIENTE,TELEFONO_CLIENTE,CEDULA_CLIENTE)
VALUES ('BRYAN','MURILLO','RAMOS','BRYANMURILLO@GMAIL.COM','8559-2543','8-0982-1564');
INSERT INTO CLIENTES(NOMBRE_CLIENTE,PRIMER_APELLIDO_CLIENTE,SEGUNDO_APELLIDO_CLIENTE,CORREO_CLIENTE,TELEFONO_CLIENTE,CEDULA_CLIENTE)
VALUES ('ANGIE','PERAZA','SOTO','ANGIEPERAZA@HOTMAIL.COM','8499-5219','4-0731-4791');

CREATE TABLE CATEGORIAS(
CATEGORIA VARCHAR2(20),
ID_CATEGORIA VARCHAR(10),
PRIMARY KEY (ID_CATEGORIA));

INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('FRUTAS','1');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('VERDURAS','2');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('CEREALES Y GRANOS','3');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('CARNES','4');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('LACTEOS','5');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('REFRESCOS','6');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('CERVEZAS','7');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('PLATOS PREPARADOS','8');
INSERT INTO CATEGORIAS(CATEGORIA,ID_CATEGORIA)
VALUES ('ENLATADOS','9');


CREATE TABLE PRODUCTOS (
NOMBRE_PRODUCTO VARCHAR2 (50),
PRECIO VARCHAR2(15),
CANTIDAD VARCHAR2(15),
ID_CATEGORIA VARCHAR2(10),
ID_PROVEEDOR VARCHAR2(10),
ID_PRODUCTO VARCHAR (15) PRIMARY KEY,
CONSTRAINT FK_CATEGORIA FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIAS (ID_CATEGORIA),
CONSTRAINT FK_PROVEEDOR FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDORES (ID_PROVEEDOR)
);

INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('COCA COLA','1000','30','6','26','1');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('ATUN SARDIMAR','1500','40','9','29','2');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('YOGURT FRESA','400','90','5','25','3');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('MANZANA','600','36','1','21','4');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('PIZZA CONGELADA','6500','23','8','28','5');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('IMPERIAL','1200','100','7','27','6');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('BISTEK','1200','46','4','24','7');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('CHAYOTE','800','32','2','22','8');
INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO,PRECIO,CANTIDAD,ID_CATEGORIA,ID_PROVEEDOR,ID_PRODUCTO)
VALUES ('CEREAL DE TRIJUELAS','2400','29','3','23','9');


CREATE TABLE FACTURACION(
FECHA_FACTURACION VARCHAR2(15),
TOTAL VARCHAR2(20),
CANTIDAD_ORDENADA VARCHAR2(20),
ID_PRODUCTO VARCHAR2(15),
ID_CLIENTE VARCHAR(15),
NOMBRE_PRODUCTO VARCHAR2(50),
ID_FACTURA VARCHAR(15),
PRIMARY KEY (ID_FACTURA),
CONSTRAINT FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS (ID_PRODUCTO),
CONSTRAINT FK_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (CEDULA_CLIENTE));

INSERT INTO FACTURACION (FECHA_FACTURACION,TOTAL,CANTIDAD_ORDENADA,ID_PRODUCTO,ID_CLIENTE,NOMBRE_PRODUCTO,ID_FACTURA)
VALUES('12/03/2023','40000','40','1','2-4213-8749','COCA COLA', '01');
INSERT INTO FACTURACION (FECHA_FACTURACION,TOTAL,CANTIDAD_ORDENADA,ID_PRODUCTO,ID_CLIENTE,NOMBRE_PRODUCTO,ID_FACTURA)
VALUES('14/05/2023','6000','4','2','5-1253-3641','ATUN SARDIMAR', '02');
INSERT INTO FACTURACION (FECHA_FACTURACION,TOTAL,CANTIDAD_ORDENADA,ID_PRODUCTO,ID_CLIENTE,NOMBRE_PRODUCTO,ID_FACTURA)
VALUES('24/01/2023','10000','25','3','6-6527-1900','YOGURT FRESA', '03');
INSERT INTO FACTURACION (FECHA_FACTURACION,TOTAL,CANTIDAD_ORDENADA,ID_PRODUCTO,ID_CLIENTE,NOMBRE_PRODUCTO,ID_FACTURA)
VALUES('01/06/2023','1200','2','4','3-2293-6159','MANZANA', '04');
INSERT INTO FACTURACION (FECHA_FACTURACION,TOTAL,CANTIDAD_ORDENADA,ID_PRODUCTO,ID_CLIENTE,NOMBRE_PRODUCTO,ID_FACTURA)
VALUES('30/03/2023','13000','2','5','8-0982-1564','PIZZA CONGELADA', '05');
INSERT INTO FACTURACION (FECHA_FACTURACION,TOTAL,CANTIDAD_ORDENADA,ID_PRODUCTO,ID_CLIENTE,NOMBRE_PRODUCTO,ID_FACTURA)
VALUES('21/04/2023','36000','30','6','4-0731-4791','IMPERIAL', '06');


CREATE TABLE EMPLEADOS(
NOMBRE_EMPLEADO VARCHAR(20),
PRIMER_APELLIDO_EMPLEADO VARCHAR2(20),
SEGUNDO_APELLIDO_EMPLEADO VARCHAR2(20),
FECHA_CONTRATACION VARCHAR(20),
CORREO_EMPLEADO VARCHAR2(50),
ID_EMPLEADO VARCHAR(5),
ID_POSICION VARCHAR(5),
PRIMARY KEY (ID_EMPLEADO),
CONSTRAINT FK_ID_POSICION FOREIGN KEY (ID_POSICION) REFERENCES POSICION (ID_POSICION));


INSERT INTO EMPLEADOS (NOMBRE_EMPLEADO,PRIMER_APELLIDO_EMPLEADO,SEGUNDO_APELLIDO_EMPLEADO,FECHA_CONTRATACION, CORREO_EMPLEADO, ID_EMPLEADO,ID_POSICION)
VALUES ('MARIO','CHAVEZ','MONGE','12/12/2022','MARIOCHAVES@GMAIL.COM','01','01');
INSERT INTO EMPLEADOS (NOMBRE_EMPLEADO,PRIMER_APELLIDO_EMPLEADO,SEGUNDO_APELLIDO_EMPLEADO,FECHA_CONTRATACION, CORREO_EMPLEADO, ID_EMPLEADO,ID_POSICION)
VALUES ('JUAN','VIQUEZ','CHAVARRIA','04/02/2023','JUANVIQUEZ@HOTMAIL.COM','02','02');
INSERT INTO EMPLEADOS (NOMBRE_EMPLEADO,PRIMER_APELLIDO_EMPLEADO,SEGUNDO_APELLIDO_EMPLEADO,FECHA_CONTRATACION, CORREO_EMPLEADO, ID_EMPLEADO,ID_POSICION)
VALUES ('PATRICIA','HERNANDEZ','ARIAS','01/07/2021','PATRICIAHERNANDEZ@YAHOO.COM','03','03');
INSERT INTO EMPLEADOS (NOMBRE_EMPLEADO,PRIMER_APELLIDO_EMPLEADO,SEGUNDO_APELLIDO_EMPLEADO,FECHA_CONTRATACION, CORREO_EMPLEADO, ID_EMPLEADO,ID_POSICION)
VALUES ('KARLA','FONSECA','VARGAS','11/05/2023','KARLAFONSECA@GMAIL.COM','04','04');


CREATE TABLE POSICION(
POSICION VARCHAR2(40),
ID_POSICION VARCHAR(5),
PRIMARY KEY (ID_POSICION));

INSERT INTO POSICION(POSICION,ID_POSICION)
VALUES('GERENTE','01');
INSERT INTO POSICION(POSICION,ID_POSICION)
VALUES('CAJERO','02');
INSERT INTO POSICION(POSICION,ID_POSICION)
VALUES('ALMACEN','03');
INSERT INTO POSICION(POSICION,ID_POSICION)
VALUES('REPONEDOR','04');
INSERT INTO POSICION(POSICION,ID_POSICION)
VALUES('LIMPIEZA','05');
INSERT INTO POSICION(POSICION,ID_POSICION)
VALUES('RESPONSABLE DE SECCION','06');


SELECT cols.table_name, cols.column_name, cols.position, cons.status, cons.owner
FROM all_constraints cons, all_cons_columns cols
WHERE cols.table_name = 'EMPLEADOS'
AND cons.constraint_type = 'P'
AND cons.constraint_name = cols.constraint_name
AND cons.owner = cols.owner
ORDER BY cols.table_name, cols.position;


SELECT * FROM EMPLEADOS;
---------------------------------------------------------------------------------
------------------------------SP CRUD------------------------------

-------------------TABLA PROVEEDORES-------------------

------Procedimiento Almacenado para Insertar un Proveedor:------

CREATE OR REPLACE PROCEDURE InsertarProveedor(
    p_nombre_proveedor IN PROVEEDORES.NOMBRE_PROVEEDOR%TYPE,
    p_fecha_contrato IN PROVEEDORES.FECHA_CONTRATO%TYPE,
    p_correo_proveedor IN PROVEEDORES.CORREO_PROVEEDOR%TYPE,
    p_telefono_proveedor IN PROVEEDORES.TELEFONO_PROVEEDOR%TYPE,
    p_id_proveedor IN PROVEEDORES.ID_PROVEEDOR%TYPE
)
AS
BEGIN
    INSERT INTO PROVEEDORES(NOMBRE_PROVEEDOR, FECHA_CONTRATO, CORREO_PROVEEDOR, TELEFONO_PROVEEDOR, ID_PROVEEDOR)
    VALUES(p_nombre_proveedor, p_fecha_contrato, p_correo_proveedor, p_telefono_proveedor, p_id_proveedor);
    COMMIT;
END;

------Procedimiento Almacenado para Actualizar un Proveedor:------

CREATE OR REPLACE PROCEDURE ActualizarProveedor(
    p_id_proveedor IN PROVEEDORES.ID_PROVEEDOR%TYPE,
    p_nuevo_nombre_proveedor IN PROVEEDORES.NOMBRE_PROVEEDOR%TYPE,
    p_nueva_fecha_contrato IN PROVEEDORES.FECHA_CONTRATO%TYPE,
    p_nuevo_correo_proveedor IN PROVEEDORES.CORREO_PROVEEDOR%TYPE,
    p_nuevo_telefono_proveedor IN PROVEEDORES.TELEFONO_PROVEEDOR%TYPE
)
AS
BEGIN
    UPDATE PROVEEDORES
    SET NOMBRE_PROVEEDOR = p_nuevo_nombre_proveedor,
        FECHA_CONTRATO = p_nueva_fecha_contrato,
        CORREO_PROVEEDOR = p_nuevo_correo_proveedor,
        TELEFONO_PROVEEDOR = p_nuevo_telefono_proveedor
    WHERE ID_PROVEEDOR = p_id_proveedor;
    COMMIT;
END;


------Función para Obtener Información de un Proveedor:------

CREATE OR REPLACE FUNCTION ObtenerProveedor(p_id_proveedor IN PROVEEDORES.ID_PROVEEDOR%TYPE)
RETURN PROVEEDORES%ROWTYPE
AS
    v_proveedor PROVEEDORES%ROWTYPE;
BEGIN
    SELECT *
    INTO v_proveedor
    FROM PROVEEDORES
    WHERE ID_PROVEEDOR = p_id_proveedor;
    RETURN v_proveedor;
END;


------Cursor para Obtener Todos los Proveedores:------

CREATE OR REPLACE FUNCTION ObtenerTodosProveedores
RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM PROVEEDORES;
    RETURN v_cursor;
END;


-------------------TABLA CLIENTES-------------------

------Procedimiento Almacenado para Insertar un Cliente:.------

CREATE OR REPLACE PROCEDURE InsertarCliente(
    p_nombre_cliente IN CLIENTES.NOMBRE_CLIENTE%TYPE,
    p_primer_apellido_cliente IN CLIENTES.PRIMER_APELLIDO_CLIENTE%TYPE,
    p_segundo_apellido_cliente IN CLIENTES.SEGUNDO_APELLIDO_CLIENTE%TYPE,
    p_correo_cliente IN CLIENTES.CORREO_CLIENTE%TYPE,
    p_telefono_cliente IN CLIENTES.TELEFONO_CLIENTE%TYPE,
    p_cedula_cliente IN CLIENTES.CEDULA_CLIENTE%TYPE
)
AS
BEGIN
    INSERT INTO CLIENTES(NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, CORREO_CLIENTE, TELEFONO_CLIENTE, CEDULA_CLIENTE)
    VALUES(p_nombre_cliente, p_primer_apellido_cliente, p_segundo_apellido_cliente, p_correo_cliente, p_telefono_cliente, p_cedula_cliente);
    COMMIT;
END;



------Procedimiento Almacenado para Actualizar un Cliente:------


CREATE OR REPLACE PROCEDURE ActualizarCliente(
    p_cedula_cliente IN CLIENTES.CEDULA_CLIENTE%TYPE,
    p_nuevo_nombre_cliente IN CLIENTES.NOMBRE_CLIENTE%TYPE,
    p_nuevo_primer_apellido_cliente IN CLIENTES.PRIMER_APELLIDO_CLIENTE%TYPE,
    p_nuevo_segundo_apellido_cliente IN CLIENTES.SEGUNDO_APELLIDO_CLIENTE%TYPE,
    p_nuevo_correo_cliente IN CLIENTES.CORREO_CLIENTE%TYPE,
    p_nuevo_telefono_cliente IN CLIENTES.TELEFONO_CLIENTE%TYPE
)
AS
BEGIN
    UPDATE CLIENTES
    SET NOMBRE_CLIENTE = p_nuevo_nombre_cliente,
        PRIMER_APELLIDO_CLIENTE = p_nuevo_primer_apellido_cliente,
        SEGUNDO_APELLIDO_CLIENTE = p_nuevo_segundo_apellido_cliente,
        CORREO_CLIENTE = p_nuevo_correo_cliente,
        TELEFONO_CLIENTE = p_nuevo_telefono_cliente
    WHERE CEDULA_CLIENTE = p_cedula_cliente;
    COMMIT;
END;


------Procedimiento Almacenado para Eliminar un Cliente:------


CREATE OR REPLACE PROCEDURE EliminarCliente(p_cedula_cliente IN CLIENTES.CEDULA_CLIENTE%TYPE)
AS
BEGIN
    DELETE FROM CLIENTES
    WHERE CEDULA_CLIENTE = p_cedula_cliente;
    COMMIT;
END;

------Función para Obtener Información de un Cliente:------

CREATE OR REPLACE FUNCTION ObtenerCliente(p_cedula_cliente IN CLIENTES.CEDULA_CLIENTE%TYPE)
RETURN CLIENTES%ROWTYPE
AS
    v_cliente CLIENTES%ROWTYPE;
BEGIN
    SELECT *
    INTO v_cliente
    FROM CLIENTES
    WHERE CEDULA_CLIENTE = p_cedula_cliente;

    RETURN v_cliente;
END;


------Cursor para Obtener Todos los Clientes:------


CREATE OR REPLACE FUNCTION ObtenerTodosClientes
RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM CLIENTES;

    RETURN v_cursor;
END;


-------------------TABLA CATEGORIAS-------------------

------Procedimiento Almacenado para Insertar una Categoría:------


CREATE OR REPLACE PROCEDURE InsertarCategoria(
    p_categoria IN CATEGORIAS.CATEGORIA%TYPE,
    p_id_categoria IN CATEGORIAS.ID_CATEGORIA%TYPE
)
AS
BEGIN
    INSERT INTO CATEGORIAS(CATEGORIA, ID_CATEGORIA)
    VALUES(p_categoria, p_id_categoria);
    COMMIT;
END;


------Procedimiento Almacenado para Actualizar una Categoría:------


CREATE OR REPLACE PROCEDURE ActualizarCategoria(
    p_id_categoria IN CATEGORIAS.ID_CATEGORIA%TYPE,
    p_nueva_categoria IN CATEGORIAS.CATEGORIA%TYPE
)
AS
BEGIN
    UPDATE CATEGORIAS
    SET CATEGORIA = p_nueva_categoria
    WHERE ID_CATEGORIA = p_id_categoria;
    COMMIT;
END;



------Procedimiento Almacenado para Eliminar una Categoría------


CREATE OR REPLACE PROCEDURE EliminarCategoria(p_id_categoria IN CATEGORIAS.ID_CATEGORIA%TYPE)
AS
BEGIN
    DELETE FROM CATEGORIAS
    WHERE ID_CATEGORIA = p_id_categoria;
    COMMIT;
END;


------Función para Obtener Información de una Categoría:------


CREATE OR REPLACE FUNCTION ObtenerCategoria(p_id_categoria IN CATEGORIAS.ID_CATEGORIA%TYPE)
RETURN CATEGORIAS%ROWTYPE
AS
    v_categoria CATEGORIAS%ROWTYPE;
BEGIN
    SELECT *
    INTO v_categoria
    FROM CATEGORIAS
    WHERE ID_CATEGORIA = p_id_categoria;

    RETURN v_categoria;
END;



------Cursor para Obtener Todas las Categorías:------


CREATE OR REPLACE FUNCTION ObtenerTodasCategorias
RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM CATEGORIAS;

    RETURN v_cursor;
END;



-------------------TABLA PRODUCTOS-------------------

------Procedimiento Almacenado para Insertar un Producto:------

CREATE OR REPLACE PROCEDURE InsertarProducto(
    p_nombre_producto IN PRODUCTOS.NOMBRE_PRODUCTO%TYPE,
    p_precio IN PRODUCTOS.PRECIO%TYPE,
    p_cantidad IN PRODUCTOS.CANTIDAD%TYPE,
    p_id_categoria IN PRODUCTOS.ID_CATEGORIA%TYPE,
    p_id_proveedor IN PRODUCTOS.ID_PROVEEDOR%TYPE,
    p_id_producto IN PRODUCTOS.ID_PRODUCTO%TYPE
)
AS
BEGIN
    INSERT INTO PRODUCTOS(NOMBRE_PRODUCTO, PRECIO, CANTIDAD, ID_CATEGORIA, ID_PROVEEDOR, ID_PRODUCTO)
    VALUES(p_nombre_producto, p_precio, p_cantidad, p_id_categoria, p_id_proveedor, p_id_producto);
    COMMIT;
END;


------Procedimiento Almacenado para Actualizar un Producto:------


CREATE OR REPLACE PROCEDURE ActualizarProducto(
    p_id_producto IN PRODUCTOS.ID_PRODUCTO%TYPE,
    p_nuevo_nombre_producto IN PRODUCTOS.NOMBRE_PRODUCTO%TYPE,
    p_nuevo_precio IN PRODUCTOS.PRECIO%TYPE,
    p_nueva_cantidad IN PRODUCTOS.CANTIDAD%TYPE,
    p_nuevo_id_categoria IN PRODUCTOS.ID_CATEGORIA%TYPE,
    p_nuevo_id_proveedor IN PRODUCTOS.ID_PROVEEDOR%TYPE
)
AS
BEGIN
    UPDATE PRODUCTOS
    SET NOMBRE_PRODUCTO = p_nuevo_nombre_producto,
        PRECIO = p_nuevo_precio,
        CANTIDAD = p_nueva_cantidad,
        ID_CATEGORIA = p_nuevo_id_categoria,
        ID_PROVEEDOR = p_nuevo_id_proveedor
    WHERE ID_PRODUCTO = p_id_producto;
    COMMIT;
END;


------Procedimiento Almacenado para Eliminar un Producto:------


CREATE OR REPLACE PROCEDURE EliminarProducto(p_id_producto IN PRODUCTOS.ID_PRODUCTO%TYPE)
AS
BEGIN
    DELETE FROM PRODUCTOS
    WHERE ID_PRODUCTO = p_id_producto;
    COMMIT;
END;



------Función para Obtener Información de un Producto:------


CREATE OR REPLACE FUNCTION ObtenerProducto(p_id_producto IN PRODUCTOS.ID_PRODUCTO%TYPE)
RETURN PRODUCTOS%ROWTYPE
AS
    v_producto PRODUCTOS%ROWTYPE;
BEGIN
    SELECT *
    INTO v_producto
    FROM PRODUCTOS
    WHERE ID_PRODUCTO = p_id_producto;

    RETURN v_producto;
END;


------Cursor para Obtener Todos los Productos:------


CREATE OR REPLACE FUNCTION ObtenerTodosProductos
RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM PRODUCTOS;

    RETURN v_cursor;
END;

-------------------TABLA EMPLEADOS-------------------



------Procedimiento Almacenado para Insertar un Empleado:------


CREATE OR REPLACE PROCEDURE InsertarEmpleado(
    p_nombre_empleado IN EMPLEADOS.NOMBRE_EMPLEADO%TYPE,
    p_primer_apellido_empleado IN EMPLEADOS.PRIMER_APELLIDO_EMPLEADO%TYPE,
    p_segundo_apellido_empleado IN EMPLEADOS.SEGUNDO_APELLIDO_EMPLEADO%TYPE,
    p_fecha_contratacion IN EMPLEADOS.FECHA_CONTRATACION%TYPE,
    p_correo_empleado IN EMPLEADOS.CORREO_EMPLEADO%TYPE,
    p_id_empleado IN EMPLEADOS.ID_EMPLEADO%TYPE,
    p_id_posicion IN EMPLEADOS.ID_POSICION%TYPE
)
AS
BEGIN
    INSERT INTO EMPLEADOS(NOMBRE_EMPLEADO, PRIMER_APELLIDO_EMPLEADO, SEGUNDO_APELLIDO_EMPLEADO, FECHA_CONTRATACION, CORREO_EMPLEADO, ID_EMPLEADO, ID_POSICION)
    VALUES(p_nombre_empleado, p_primer_apellido_empleado, p_segundo_apellido_empleado, p_fecha_contratacion, p_correo_empleado, p_id_empleado, p_id_posicion);
    COMMIT;
END;


------Procedimiento Almacenado para Actualizar un Empleado:------


CREATE OR REPLACE PROCEDURE ActualizarEmpleado(
    p_id_empleado IN EMPLEADOS.ID_EMPLEADO%TYPE,
    p_nuevo_nombre_empleado IN EMPLEADOS.NOMBRE_EMPLEADO%TYPE,
    p_nuevo_primer_apellido_empleado IN EMPLEADOS.PRIMER_APELLIDO_EMPLEADO%TYPE,
    p_nuevo_segundo_apellido_empleado IN EMPLEADOS.SEGUNDO_APELLIDO_EMPLEADO%TYPE,
    p_nueva_fecha_contratacion IN EMPLEADOS.FECHA_CONTRATACION%TYPE,
    p_nuevo_correo_empleado IN EMPLEADOS.CORREO_EMPLEADO%TYPE,
    p_nuevo_id_posicion IN EMPLEADOS.ID_POSICION%TYPE
)
AS
BEGIN
    UPDATE EMPLEADOS
    SET NOMBRE_EMPLEADO = p_nuevo_nombre_empleado,
        PRIMER_APELLIDO_EMPLEADO = p_nuevo_primer_apellido_empleado,
        SEGUNDO_APELLIDO_EMPLEADO = p_nuevo_segundo_apellido_empleado,
        FECHA_CONTRATACION = p_nueva_fecha_contratacion,
        CORREO_EMPLEADO = p_nuevo_correo_empleado,
        ID_POSICION = p_nuevo_id_posicion
    WHERE ID_EMPLEADO = p_id_empleado;
    COMMIT;
END;


------Procedimiento Almacenado para Eliminar un Empleado:------


CREATE OR REPLACE PROCEDURE EliminarEmpleado(p_id_empleado IN EMPLEADOS.ID_EMPLEADO%TYPE)
AS
BEGIN
    DELETE FROM EMPLEADOS
    WHERE ID_EMPLEADO = p_id_empleado;
    COMMIT;
END;


------Función para Obtener Información de un Empleado:------

CREATE OR REPLACE FUNCTION ObtenerEmpleado(p_id_empleado IN EMPLEADOS.ID_EMPLEADO%TYPE)
RETURN EMPLEADOS%ROWTYPE
AS
    v_empleado EMPLEADOS%ROWTYPE;
BEGIN
    SELECT *
    INTO v_empleado
    FROM EMPLEADOS
    WHERE ID_EMPLEADO = p_id_empleado;

    RETURN v_empleado;
END;

------Cursor para Obtener Todos los Empleados:------


CREATE OR REPLACE FUNCTION ObtenerTodosEmpleados
RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM EMPLEADOS;

    RETURN v_cursor;
END;


-------------------TABLA POSICION-------------------



------Procedimiento Almacenado para Insertar una Posición:------


CREATE OR REPLACE PROCEDURE InsertarPosicion(
    p_posicion IN POSICION.POSICION%TYPE,
    p_id_posicion IN POSICION.ID_POSICION%TYPE
)
AS
BEGIN
    INSERT INTO POSICION(POSICION, ID_POSICION)
    VALUES(p_posicion, p_id_posicion);
    COMMIT;
END;


------Procedimiento Almacenado para Actualizar una Posición:------


CREATE OR REPLACE PROCEDURE ActualizarPosicion(
    p_id_posicion IN POSICION.ID_POSICION%TYPE,
    p_nueva_posicion IN POSICION.POSICION%TYPE
)
AS
BEGIN
    UPDATE POSICION
    SET POSICION = p_nueva_posicion
    WHERE ID_POSICION = p_id_posicion;
    COMMIT;
END;


------Procedimiento Almacenado para Eliminar una Posición:------


CREATE OR REPLACE PROCEDURE EliminarPosicion(p_id_posicion IN POSICION.ID_POSICION%TYPE)
AS
BEGIN
    DELETE FROM POSICION
    WHERE ID_POSICION = p_id_posicion;
    COMMIT;
END;


------Función para Obtener Información de una Posición:------


CREATE OR REPLACE FUNCTION ObtenerPosicion(p_id_posicion IN POSICION.ID_POSICION%TYPE)
RETURN POSICION%ROWTYPE
AS
    v_posicion POSICION%ROWTYPE;
BEGIN
    SELECT *
    INTO v_posicion
    FROM POSICION
    WHERE ID_POSICION = p_id_posicion;

    RETURN v_posicion;
END;


------Cursor para Obtener Todas las Posiciones:------


CREATE OR REPLACE FUNCTION ObtenerTodasPosiciones
RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM POSICION;

    RETURN v_cursor;
END;


